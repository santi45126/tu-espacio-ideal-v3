const API_BASE_URL='https://667b2184bd04576b61ee483c.mockapi.io';const API_ENDPOINT='/departments';const departmentGrid=document.querySelector('.department-grid');const searchInput=document.getElementById('search-input');const searchButton=document.getElementById('search-button');const clearSearchButton=document.getElementById('clear-search-button');const publishButton=document.getElementById('publish-button');const minBedroomsSelect=document.getElementById('min-bedrooms');const minPriceInput=document.getElementById('min-price');const maxPriceInput=document.getElementById('max-price');const sortBySelect=document.getElementById('sort-by');const modalPublish=document.getElementById('modal-publish');const modalDetails=document.getElementById('modal-details');const closeButtons=document.querySelectorAll('.close-button');const publishForm=document.getElementById('publish-form');const modalPublishTitle=document.getElementById('modal-publish-title');const imageUpload=document.getElementById('image_upload');const imagePreview=document.getElementById('image-preview');const imageUrlUnchanged=document.getElementById('image_url_unchanged');const contactToggleButton=document.querySelector('.contact-toggle-button');const contactFormContainer=document.getElementById('contact-form-container');const contactForm=document.getElementById('contact-form');
// --- NUEVAS VARIABLES PARA PAGINACIÓN ---
let currentPage = 1;
const itemsPerPage = 6; // Por ejemplo, 6 departamentos por página
let totalDepartmentsCount = 0; // Para almacenar el total de elementos de la API (sin filtrar)
// --- FIN NUEVAS VARIABLES ---
let allDepartments=[];let editingDepartmentId=null;let currentSearchTerm='';function showToast(e,t='success'){const o=document.getElementById('toast-container');const a=document.createElement('div');a.classList.add('toast',t);a.textContent=e;o.appendChild(a);setTimeout(()=>{a.remove()},3e3)}imageUpload.addEventListener('change',function(){const e=this.files[0];if(e){const t=new FileReader();t.onload=function(e){imagePreview.src=e.target.result;imageUrlUnchanged.value='false'};t.readAsDataURL(e)}else{imagePreview.src='https://placehold.co/300x200/cccccc/FFFFFF?text=Sin+Imagen';imageUrlUnchanged.value='true'}});function openModal(e){e.style.display='block';setTimeout(()=>e.classList.add('show'),10)}function closeModal(e){e.classList.remove('show');setTimeout(()=>e.style.display='none',300);if(e===modalDetails){contactFormContainer.style.display='none';contactForm.reset()}}closeButtons.forEach(e=>{e.addEventListener('click',()=>{(closeModal(modalPublish),closeModal(modalDetails))})});window.addEventListener('click',e=>{if(e.target===modalPublish){closeModal(modalPublish)}if(e.target===modalDetails){closeModal(modalDetails)}});
// --- MODIFICACIÓN DE loadDepartments PARA PAGINACIÓN ---
async function loadDepartments(page = 1) {
    currentPage = page;
    try {
        // MockAPI permite simular paginación con _page y _limit
        const url = `${API_BASE_URL}${API_ENDPOINT}?_page=${currentPage}&_limit=${itemsPerPage}`;
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        allDepartments = await response.json();

        // Para obtener el total de elementos, MockAPI envía un header 'x-total-count'
        // Esto es crucial para calcular totalPages
        totalDepartmentsCount = parseInt(response.headers.get('x-total-count') || 0);
        filterAndSortDepartments();
    } catch (e) {
        console.error('Error al cargar los departamentos:', e);
        showToast('Error al cargar departamentos.', 'error');
    }
}
// --- FIN MODIFICACIÓN DE loadDepartments ---

function highlightText(text, term) {if (!term || text === null || text === undefined) return text;const regex = new RegExp(`(${term.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');return text.replace(regex, '<span class="highlight">$1</span>');}
// --- MODIFICACIÓN DE displayDepartments PARA CONTROLES DE PAGINACIÓN ---
function displayDepartments(e){
    departmentGrid.innerHTML='';
    if(0===e.length){departmentGrid.innerHTML='<p>No se encontraron departamentos que coincidan con la búsqueda.</p>';}

    e.forEach(e=>{
        const t=document.createElement('div');
        t.classList.add('department-card');
        const highlightedTitle = highlightText(e.title, currentSearchTerm);
        const highlightedLocation = highlightText(e.location, currentSearchTerm);
        const highlightedDescription = highlightText(e.description, currentSearchTerm);
        t.innerHTML=`
            <img src="${e.image_url||'https://placehold.co/300x200/cccccc/FFFFFF?text=Imagen+No+Disponible'}" alt="Imagen del departamento en ${e.location||'Desconocida'}" onerror="this.onerror=null;this.src='https://placehold.co/300x200/cccccc/FFFFFF?text=Error+al+cargar+imagen';" loading="lazy">
            <h3>${highlightedTitle||'Departamento sin título'}</h3>
            <p><strong>Ubicación:</strong> ${highlightedLocation||'Desconocida'}</p>
            <p><strong>Precio:</strong> $${(e.price||0).toLocaleString('es-AR')}</p>
            <p><strong>Habitaciones:</strong> ${e.bedrooms||'N/A'}</p>
            <p><strong>Baños:</strong> ${e.bathrooms||'N/A'}</p>
            <button class="details-button" data-id="${e.id}">Ver Detalles</button>
            <button class="edit-button" data-id="${e.id}">Editar</button>
            <button class="delete-button" data-id="${e.id}">Eliminar</button>
        `;departmentGrid.appendChild(t);
    });
    renderPaginationControls(totalDepartmentsCount); // Llamar a la nueva función de paginación
}
// --- FIN MODIFICACIÓN DE displayDepartments ---

function showDepartmentDetails(e){const t=allDepartments.find(t=>t.id===e);if(t){document.getElementById('department-title').textContent=t.title||'Detalles del Departamento';document.getElementById('department-image').src=t.image_url||'https://placehold.co/300x200/cccccc/FFFFFF?text=Imagen+No+Disponible';document.getElementById('department-image').alt=`Imagen del departamento en ${t.location||'Desconocida'}`;document.getElementById('department-location').textContent=t.location||'Desconocida';document.getElementById('department-price').textContent=(t.price||0).toLocaleString('es-AR');document.getElementById('department-bedrooms').textContent=t.bedrooms||'N/A';document.getElementById('department-bathrooms').textContent=t.bathrooms||'N/A';document.getElementById('department-description').textContent=t.description||'Sin descripción.';document.getElementById('department-contact').textContent=t.contact||'No especificado.';contactFormContainer.style.display='none';contactForm.reset();openModal(modalDetails)}}publishButton.addEventListener('click',()=>{modalPublishTitle.textContent='Publicar Nuevo Departamento';publishForm.reset();imagePreview.src='https://placehold.co/300x200/cccccc/FFFFFF?text=Sin+Imagen';imageUrlUnchanged.value='true';editingDepartmentId=null;openModal(modalPublish)});async function saveDepartment(e){let t=`${API_BASE_URL}${API_ENDPOINT}`;let o='POST';if(editingDepartmentId){t+=`/${editingDepartmentId}`;o='PUT'}try{const a=await fetch(t,{method:o,headers:{'Content-Type':'application/json'},body:JSON.stringify(e)});if(!a.ok){throw new Error(`HTTP error! status: ${a.status}`)}const n=await a.json();showToast(editingDepartmentId?'Departamento actualizado con éxito.':'Departamento publicado con éxito.');closeModal(modalPublish);loadDepartments(currentPage);}catch(e){console.error('Error al guardar el departamento:',e);showToast('Error al guardar el departamento.','error')}}async function deleteDepartment(e){if(!confirm('¿Estás seguro de que quieres eliminar este departamento?')){return}try{const t=await fetch(`${API_BASE_URL}${API_ENDPOINT}/${e}`,{method:'DELETE'});if(!t.ok){throw new Error(`HTTP error! status: ${t.status}`)}showToast('Departamento eliminado con éxito.','info');loadDepartments(currentPage);}catch(e){console.error('Error al eliminar el departamento:',e);showToast('Error al eliminar el departamento.','error')}}async function editDepartment(e){const t=allDepartments.find(t=>t.id===e);if(t){modalPublishTitle.textContent='Editar Departamento';document.getElementById('title').value=t.title||'';document.getElementById('location').value=t.location||'';document.getElementById('contact').value=t.contact||'';document.getElementById('price').value=t.price||'';document.getElementById('bedrooms').value=t.bedrooms||'';document.getElementById('bathrooms').value=t.bathrooms||'';document.getElementById('description').value=t.description||'';imagePreview.src=t.image_url||'https://placehold.co/300x200/cccccc/FFFFFF?text=Sin+Imagen';imageUrlUnchanged.value='true';editingDepartmentId=e;openModal(modalPublish)}}
// --- MODIFICACIÓN DE filterAndSortDepartments PARA TRABAJAR CON PAGINACIÓN ---
function filterAndSortDepartments(){
    // Nota: La paginación real se hace en loadDepartments con la API.
    // filterAndSortDepartments ahora solo ordena y muestra los DEPARTAMENTOS YA CARGADOS para la página actual.
    // Si la búsqueda y los filtros fueran a aplicar a TODO el dataset y no solo a la página actual,
    // tendríamos que hacer una llamada a la API con los filtros y paginación.
    // Por simplicidad, asumimos que los filtros se aplican a los datos de la página actual.

    const e=currentSearchTerm;
    const t=parseInt(minBedroomsSelect.value);const o=parseFloat(minPriceInput.value);const a=parseFloat(maxPriceInput.value);
    let filteredAndSortedDepartments = allDepartments.filter(n=>{
        const i=e===''||(n.title&&n.title.toLowerCase().includes(e))||(n.location&&n.location.toLowerCase().includes(e))||(n.description&&n.description.toLowerCase().includes(e));
        const c=0===t||(n.bedrooms&&n.bedrooms>=t);
        const d=isNaN(o)||(n.price&&n.price>=o);
        const s=isNaN(a)||(n.price&&n.price<=a);
        return i&&c&&d&&s
    });

    const sortBy=sortBySelect.value;
    if(sortBy!=='none'){
        filteredAndSortedDepartments.sort((e,t)=>{
            let o,a;
            if(sortBy.includes('price')){o=e.price||0;a=t.price||0}else if(sortBy.includes('bedrooms')){o=e.bedrooms||0;a=t.bedrooms||0}
            if(sortBy.endsWith('asc')){return o-a}else{return a-o}
        });
    }
    displayDepartments(filteredAndSortedDepartments);
    // IMPORTANTE: Si los filtros deben afectar el conteo total de páginas,
    // la llamada a la API con los filtros también debería obtener el x-total-count filtrado.
    // Para esta implementación, los filtros y el ordenamiento se aplican a los datos de la página ya cargada.
}
// --- FIN MODIFICACIÓN DE filterAndSortDepartments ---

searchButton.addEventListener('click', () => { currentPage = 1; loadDepartments(currentPage); }); // NUEVO: Resetear página al buscar
searchInput.addEventListener('keyup',e=>{if('Enter'===e.key){currentPage = 1; loadDepartments(currentPage);}}); // NUEVO: Resetear página al buscar
minBedroomsSelect.addEventListener('change', () => { currentPage = 1; loadDepartments(currentPage); }); // NUEVO: Resetear página al filtrar
minPriceInput.addEventListener('input', () => { currentPage = 1; loadDepartments(currentPage); }); // NUEVO: Resetear página al filtrar
maxPriceInput.addEventListener('input', () => { currentPage = 1; loadDepartments(currentPage); }); // NUEVO: Resetear página al filtrar
sortBySelect.addEventListener('change', filterAndSortDepartments); // Sort solo reordena la página actual

clearSearchButton.addEventListener('click',()=>{
    searchInput.value='';minBedroomsSelect.value='0';minPriceInput.value='';maxPriceInput.value='';sortBySelect.value='none';
    currentSearchTerm = '';
    currentPage = 1; // NUEVO: Resetear página al limpiar
    loadDepartments(currentPage); // Cargar departamentos desde la página 1
});
publishForm.addEventListener('submit',async e=>{e.preventDefault();const t=new FormData(publishForm);const o={title:t.get('title'),location:t.get('location'),contact:t.get('contact'),price:parseFloat(t.get('price')),bedrooms:parseInt(t.get('bedrooms')),bathrooms:parseFloat(t.get('bathrooms')),description:t.get('description')};if(!o.title||o.title.trim()===''){showToast('El título es obligatorio.','error');return}if(!o.location||o.location.trim()===''){showToast('La ubicación es obligatoria.','error');return}if(!o.contact||o.contact.trim()===''){showToast('El contacto es obligatorio.','error');return}if(isNaN(o.price)||o.price<=0){showToast('El precio debe ser un número positivo.','error');return}if(isNaN(o.bedrooms)||o.bedrooms<=0||!Number.isInteger(o.bedrooms)){showToast('Las habitaciones deben ser un número entero positivo.','error');return}if(isNaN(o.bathrooms)||o.bathrooms<=0){showToast('Los baños deben ser un número positivo.','error');return}const a=/^[^\s@]+@[^\s@]+\.[^\s@]+$|^[0-9\s\-\(\)\+]{7,}$/;if(!a.test(o.contact)){showToast('Formato de contacto inválido. Ingrese un email o un número de teléfono válido (mín. 7 dígitos).','error');return}if(imageUpload.files.length>0&&'false'===imageUrlUnchanged.value){o.image_url='https://picsum.photos/400/300?'+Math.random()}else if(editingDepartmentId&&'true'===imageUrlUnchanged.value){const e=allDepartments.find(e=>e.id===editingDepartmentId);o.image_url=e?e.image_url:null}else{o.image_url=null}await saveDepartment(o)});contactToggleButton.addEventListener('click', () => {contactFormContainer.style.display = contactFormContainer.style.display === 'none' ? 'block' : 'none';});contactForm.addEventListener('submit', async (e) => {e.preventDefault();const inquirerName = document.getElementById('inquirer-name').value.trim();const inquirerEmail = document.getElementById('inquirer-email').value.trim();const inquirerPhone = document.getElementById('inquirer-phone').value.trim();const inquirerMessage = document.getElementById('inquirer-message').value.trim();if (!inquirerName) {showToast('Por favor, ingresa tu nombre.', 'error');return;}const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;if (!inquirerEmail || !emailRegex.test(inquirerEmail)) {showToast('Por favor, ingresa un email válido.', 'error');return;}if (!inquirerMessage) {showToast('El mensaje no puede estar vacío.', 'error');return;}showToast('Consulta enviada con éxito. El publicador se contactará pronto.', 'success');console.log('Consulta enviada:', {departmentId: document.getElementById('department-title').textContent, inquirerName, inquirerEmail, inquirerPhone, inquirerMessage});contactForm.reset();contactFormContainer.style.display = 'none';});

// --- NUEVA FUNCIÓN PARA GENERAR Y RENDERIZAR CONTROLES DE PAGINACIÓN ---
function renderPaginationControls() {
    const paginationControls = document.getElementById('pagination-controls');
    if (!paginationControls) return; // Asegurarse de que el elemento existe

    const totalPages = Math.ceil(totalDepartmentsCount / itemsPerPage);
    paginationControls.innerHTML = ''; // Limpiar controles anteriores

    if (totalPages <= 1 && currentSearchTerm === '') { // Ocultar si solo hay 1 página y no hay búsqueda activa
        paginationControls.style.display = 'none';
        return;
    }
    paginationControls.style.display = 'flex'; // Mostrar controles

    // Botón Anterior
    const prevButton = document.createElement('button');
    prevButton.textContent = 'Anterior';
    prevButton.classList.add('pagination-button');
    prevButton.disabled = currentPage === 1;
    prevButton.addEventListener('click', () => goToPage(currentPage - 1));
    paginationControls.appendChild(prevButton);

    // Números de página
    const maxPageNumbersToShow = 5; // Limitar el número de botones de página visibles
    let startPage = Math.max(1, currentPage - Math.floor(maxPageNumbersToShow / 2));
    let endPage = Math.min(totalPages, startPage + maxPageNumbersToShow - 1);

    if (endPage - startPage + 1 < maxPageNumbersToShow) {
        startPage = Math.max(1, endPage - maxPageNumbersToShow + 1);
    }

    for (let i = startPage; i <= endPage; i++) {
        const pageButton = document.createElement('button');
        pageButton.textContent = i;
        pageButton.classList.add('pagination-button');
        if (i === currentPage) {
            pageButton.classList.add('active');
        }
        pageButton.addEventListener('click', () => goToPage(i));
        paginationControls.appendChild(pageButton);
    }

    // Botón Siguiente
    const nextButton = document.createElement('button');
    nextButton.textContent = 'Siguiente';
    nextButton.classList.add('pagination-button');
    nextButton.disabled = currentPage === totalPages || totalPages === 0;
    nextButton.addEventListener('click', () => goToPage(currentPage + 1));
    paginationControls.appendChild(nextButton);
}

// NUEVA FUNCIÓN goToPage
function goToPage(page) {
    if (page < 1 || page > Math.ceil(totalDepartmentsCount / itemsPerPage)) {
        return; // Evitar ir a páginas inválidas
    }
    currentPage = page;
    loadDepartments(currentPage);
}
// --- FIN NUEVAS FUNCIONES PARA PAGINACIÓN ---

document.addEventListener('DOMContentLoaded',()=>loadDepartments(currentPage)); // Cargar la primera página al inicio