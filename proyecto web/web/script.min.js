const API_BASE_URL='https://667b2184bd04576b61ee483c.mockapi.io';const API_ENDPOINT='/departments';const departmentGrid=document.querySelector('.department-grid');const searchInput=document.getElementById('search-input');const searchButton=document.getElementById('search-button');const clearSearchButton=document.getElementById('clear-search-button');const publishButton=document.getElementById('publish-button');const minBedroomsSelect=document.getElementById('min-bedrooms');const minPriceInput=document.getElementById('min-price');const maxPriceInput=document.getElementById('max-price');const sortBySelect=document.getElementById('sort-by');const modalPublish=document.getElementById('modal-publish');const modalDetails=document.getElementById('modal-details');const closeButtons=document.querySelectorAll('.close-button');const publishForm=document.getElementById('publish-form');const modalPublishTitle=document.getElementById('modal-publish-title');const imageUpload=document.getElementById('image_upload');const imagePreview=document.getElementById('image-preview');const imageUrlUnchanged=document.getElementById('image_url_unchanged');const contactToggleButton=document.querySelector('.contact-toggle-button');const contactFormContainer=document.getElementById('contact-form-container');const contactForm=document.getElementById('contact-form');
const paginationControls=document.getElementById('pagination-controls'); // NUEVO: Obtener el elemento de paginación
// --- NUEVOS ELEMENTOS DEL PERFIL ---
const userActionButton = document.getElementById('user-action-button');
const modalAuth = document.getElementById('modal-auth');
const authForm = document.getElementById('auth-form');
const authToggleLink = document.getElementById('auth-toggle-link');
const authTitle = document.getElementById('auth-title');
const authNameGroup = document.getElementById('auth-name-group');
// --- FIN NUEVOS ELEMENTOS ---
let currentPage = 1;const itemsPerPage = 6;let totalDepartmentsCount = 0;let allDepartments=[];let editingDepartmentId=null;let currentSearchTerm='';
// --- NUEVAS VARIABLES DE ESTADO DEL USUARIO ---
let currentUser = null; // Almacenará { id: 'someId', name: 'someName' }
// --- FIN NUEVAS VARIABLES ---

function showToast(e,t='success'){const o=document.getElementById('toast-container');const a=document.createElement('div');a.classList.add('toast',t);a.textContent=e;o.appendChild(a);setTimeout(()=>{a.remove()},3e3)}imageUpload.addEventListener('change',function(){const e=this.files[0];if(e){const t=new FileReader();t.onload=function(e){imagePreview.src=e.target.result;imageUrlUnchanged.value='false'};t.readAsDataURL(e)}else{imagePreview.src='https://placehold.co/300x200/cccccc/FFFFFF?text=Sin+Imagen';imageUrlUnchanged.value='true'}});function openModal(e){e.style.display='block';setTimeout(()=>e.classList.add('show'),10)}function closeModal(e){e.classList.remove('show');setTimeout(()=>e.style.display='none',300);if(e===modalDetails){contactFormContainer.style.display='none';contactForm.reset()}}closeButtons.forEach(e=>{e.addEventListener('click',()=>{(closeModal(modalPublish),closeModal(modalDetails),closeModal(modalAuth))})}); // NUEVO: Añadir modalAuth
window.addEventListener('click',e=>{if(e.target===modalPublish){closeModal(modalPublish)}if(e.target===modalDetails){closeModal(modalDetails)}if(e.target===modalAuth){closeModal(modalAuth)}}); // NUEVO: Añadir modalAuth

async function loadDepartments(page = 1, userOnly = false) { // NUEVO: userOnly para filtrar por usuario
    currentPage = page;
    try {
        let url = `${API_BASE_URL}${API_ENDPOINT}?_page=${currentPage}&_limit=${itemsPerPage}`;
        if (userOnly && currentUser) {
            // Si userOnly es true, filtramos por userId del currentUser
            url += `&userId=${currentUser.id}`;
        }
        
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        allDepartments = await response.json();
        
        // El x-total-count de MockAPI es sobre TODOS los elementos, no solo los filtrados por user.
        // Si queremos el conteo total de los del usuario, debemos obtener todos y luego filtrar.
        // Por simplicidad, el x-total-count seguirá siendo el total global para la paginación.
        // Para "Mis Publicaciones" la paginación se aplicará localmente.
        totalDepartmentsCount = parseInt(response.headers.get('x-total-count') || 0);

        filterAndSortDepartments(userOnly); // Pasar userOnly a filterAndSortDepartments
        updateUserUI(); // Actualizar UI de usuario después de cargar departamentos
    } catch (e) {
        console.error('Error al cargar los departamentos:', e);
        showToast('Error al cargar departamentos.', 'error');
    }
}
function highlightText(text, term) {if (!term || text === null || text === undefined) return text;const regex = new RegExp(`(${term.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');return text.replace(regex, '<span class="highlight">$1</span>');}
function displayDepartments(e){
    departmentGrid.innerHTML='';
    if(0===e.length){departmentGrid.innerHTML='<p>No se encontraron departamentos que coincidan con la búsqueda.</p>';}
    e.forEach(e=>{
        const t=document.createElement('div');
        t.classList.add('department-card');
        const highlightedTitle = highlightText(e.title, currentSearchTerm);
        const highlightedLocation = highlightText(e.location, currentSearchTerm);
        const highlightedDescription = highlightText(e.description, currentSearchTerm);
        t.innerHTML=`
            <img src="${e.image_url||'https://placehold.co/300x200/cccccc/FFFFFF?text=Imagen+No+Disponible'}" alt="Imagen del departamento en ${e.location||'Desconocida'}" onerror="this.onerror=null;this.src='https://placehold.co/300x200/cccccc/FFFFFF?text=Error+al+cargar+imagen';" loading="lazy">
            <h3>${highlightedTitle||'Departamento sin título'}</h3>
            <p><strong>Ubicación:</strong> ${highlightedLocation||'Desconocida'}</p>
            <p><strong>Precio:</strong> $${(e.price||0).toLocaleString('es-AR')}</p>
            <p><strong>Habitaciones:</strong> ${e.bedrooms||'N/A'}</p>
            <p><strong>Baños:</strong> ${e.bathrooms||'N/A'}</p>
            <button class="details-button" data-id="${e.id}">Ver Detalles</button>
            ${currentUser && e.userId === currentUser.id ? // Mostrar Editar/Eliminar solo si es el dueño
                `<button class="edit-button" data-id="${e.id}">Editar</button>
                 <button class="delete-button" data-id="${e.id}">Eliminar</button>` : ''}
        `;departmentGrid.appendChild(t);
    });
    document.querySelectorAll('.details-button').forEach(t=>{t.addEventListener('click',e=>showDepartmentDetails(e.target.dataset.id))});
    document.querySelectorAll('.edit-button').forEach(t=>{t.addEventListener('click',e=>editDepartment(e.target.dataset.id))});
    document.querySelectorAll('.delete-button').forEach(t=>{t.addEventListener('click',e=>deleteDepartment(e.target.dataset.id))});

    renderPaginationControls(); // No pasar totalDepartmentsCount directamente aquí, se calcula en la función
}
function showDepartmentDetails(e){const t=allDepartments.find(t=>t.id===e);if(t){document.getElementById('department-title').textContent=t.title||'Detalles del Departamento';document.getElementById('department-image').src=t.image_url||'https://placehold.co/300x200/cccccc/FFFFFF?text=Imagen+No+Disponible';document.getElementById('department-image').alt=`Imagen del departamento en ${t.location||'Desconocida'}`;document.getElementById('department-location').textContent=t.location||'Desconocida';document.getElementById('department-price').textContent=(t.price||0).toLocaleString('es-AR');document.getElementById('department-bedrooms').textContent=t.bedrooms||'N/A';document.getElementById('department-bathrooms').textContent=t.bathrooms||'N/A';document.getElementById('department-description').textContent=t.description||'Sin descripción.';document.getElementById('department-contact').textContent=t.contact||'No especificado.';contactFormContainer.style.display='none';contactForm.reset();openModal(modalDetails)}}
publishButton.addEventListener('click',()=>{
    if (!currentUser) { // Si no hay usuario logueado, pedirle que inicie sesión
        showToast('Necesitas iniciar sesión para publicar un departamento.', 'info');
        openModal(modalAuth);
        authTitle.textContent = 'Inicia Sesión o Regístrate para Publicar';
        authNameGroup.style.display = 'none'; // No mostrar nombre en login/register
        authForm.dataset.mode = 'login'; // Establecer modo predeterminado
        authToggleLink.textContent = '¿No tienes una cuenta? Regístrate aquí.';
        return;
    }
    modalPublishTitle.textContent='Publicar Nuevo Departamento';publishForm.reset();imagePreview.src='https://placehold.co/300x200/cccccc/FFFFFF?text=Sin+Imagen';imageUrlUnchanged.value='true';editingDepartmentId=null;openModal(modalPublish)});async function saveDepartment(e){let t=`${API_BASE_URL}${API_ENDPOINT}`;let o='POST';
    if (!currentUser) { // Doble chequeo para seguridad (aunque se controla al abrir el modal)
        showToast('Debes iniciar sesión para publicar/editar un departamento.', 'error');
        return;
    }
    e.userId = currentUser.id; // Asignar el ID del usuario actual al departamento

    if(editingDepartmentId){t+=`/${editingDepartmentId}`;o='PUT'}try{const a=await fetch(t,{method:o,headers:{'Content-Type':'application/json'},body:JSON.stringify(e)});if(!a.ok){throw new Error(`HTTP error! status: ${a.status}`)}const n=await a.json();showToast(editingDepartmentId?'Departamento actualizado con éxito.':'Departamento publicado con éxito.');closeModal(modalPublish);loadDepartments(currentPage, currentUser.showMyListings);}catch(e){console.error('Error al guardar el departamento:',e);showToast('Error al guardar el departamento.','error')}}async function deleteDepartment(e){if(!confirm('¿Estás seguro de que quieres eliminar este departamento?')){return}try{const t=await fetch(`${API_BASE_URL}${API_ENDPOINT}/${e}`,{method:'DELETE'});if(!t.ok){throw new Error(`HTTP error! status: ${t.status}`)}showToast('Departamento eliminado con éxito.','info');loadDepartments(currentPage, currentUser.showMyListings);}catch(e){console.error('Error al eliminar el departamento:',e);showToast('Error al eliminar el departamento.','error')}}async function editDepartment(e){const t=allDepartments.find(t=>t.id===e);if(t){
    if (t.userId !== currentUser.id) { // Solo el dueño puede editar
        showToast('No tienes permiso para editar este departamento.', 'error');
        return;
    }
    modalPublishTitle.textContent='Editar Departamento';document.getElementById('title').value=t.title||'';document.getElementById('location').value=t.location||'';document.getElementById('contact').value=t.contact||'';document.getElementById('price').value=t.price||'';document.getElementById('bedrooms').value=t.bedrooms||'';document.getElementById('bathrooms').value=t.bathrooms||'';document.getElementById('description').value=t.description||'';imagePreview.src=t.image_url||'https://placehold.co/300x200/cccccc/FFFFFF?text=Sin+Imagen';imageUrlUnchanged.value='true';editingDepartmentId=e;openModal(modalPublish)}}
// --- MODIFICACIÓN DE filterAndSortDepartments PARA PERFIL DE USUARIO ---
function filterAndSortDepartments(userOnly = false){ // NUEVO: userOnly para filtrar si es "Mis publicaciones"
    currentSearchTerm = searchInput.value.toLowerCase().trim();
    const e = currentSearchTerm;
    const t = parseInt(minBedroomsSelect.value);
    const o = parseFloat(minPriceInput.value);
    const a = parseFloat(maxPriceInput.value);

    let filteredDepartments = allDepartments.filter(n => {
        const isMatch = e === '' || (n.title && n.title.toLowerCase().includes(e)) || (n.location && n.location.toLowerCase().includes(e)) || (n.description && n.description.toLowerCase().includes(e));
        const hasMinBedrooms = 0 === t || (n.bedrooms && n.bedrooms >= t);
        const priceMin = isNaN(o) || (n.price && n.price >= o);
        const priceMax = isNaN(a) || (n.price && n.price <= a);
        
        // NUEVO: Filtrar por userId si userOnly es true
        const isUserListing = userOnly ? (n.userId === currentUser.id) : true;

        return isMatch && hasMinBedrooms && priceMin && priceMax && isUserListing;
    });

    const sortBy=sortBySelect.value;
    if(sortBy!=='none'){
        filteredDepartments.sort((e,t)=>{
            let o,a;
            if(sortBy.includes('price')){o=e.price||0;a=t.price||0}else if(sortBy.includes('bedrooms')){o=e.bedrooms||0;a=t.bedrooms||0}
            if(sortBy.endsWith('asc')){return o-a}else{return a-o}
        });
    }
    displayDepartments(filteredDepartments);
    // Para el cálculo de paginación en "Mis Publicaciones" necesitamos el conteo filtrado
    // Esto es una simplificación porque MockAPI no devuelve x-total-count filtrado por _page y por custom field.
    // Si estuviéramos en un backend real, la API nos daría el conteo correcto.
    // Aquí, para "Mis Publicaciones", ajustaremos totalDepartmentsCount localmente para la paginación.
    if (userOnly) {
        // totalDepartmentsCount = filteredDepartments.length; // Esto es si la paginación fuera local
        // Pero como la paginación se sigue haciendo por API, esta línea no aplicaría así.
        // Dejaremos que renderPaginationControls calcule totalPages basado en los datos cargados.
    }
}
// --- FIN MODIFICACIÓN DE filterAndSortDepartments ---

searchButton.addEventListener('click', () => { currentPage = 1; loadDepartments(currentPage); });
searchInput.addEventListener('keyup',e=>{if('Enter'===e.key){currentPage = 1; loadDepartments(currentPage);}});
minBedroomsSelect.addEventListener('change', () => { currentPage = 1; loadDepartments(currentPage); });
minPriceInput.addEventListener('input', () => { currentPage = 1; loadDepartments(currentPage); });
maxPriceInput.addEventListener('input', () => { currentPage = 1; loadDepartments(currentPage); });
sortBySelect.addEventListener('change', filterAndSortDepartments);

clearSearchButton.addEventListener('click',()=>{
    searchInput.value='';minBedroomsSelect.value='0';minPriceInput.value='';maxPriceInput.value='';sortBySelect.value='none';
    currentSearchTerm = '';
    currentPage = 1;
    loadDepartments(currentPage);
});
publishForm.addEventListener('submit',async e=>{e.preventDefault();const t=new FormData(publishForm);const o={title:t.get('title'),location:t.get('location'),contact:t.get('contact'),price:parseFloat(t.get('price')),bedrooms:parseInt(t.get('bedrooms')),bathrooms:parseFloat(t.get('bathrooms')),description:t.get('description')};if(!o.title||o.title.trim()===''){showToast('El título es obligatorio.','error');return}if(!o.location||o.location.trim()===''){showToast('La ubicación es obligatoria.','error');return}if(!o.contact||o.contact.trim()===''){showToast('El contacto es obligatorio.','error');return}if(isNaN(o.price)||o.price<=0){showToast('El precio debe ser un número positivo.','error');return}if(isNaN(o.bedrooms)||o.bedrooms<=0||!Number.isInteger(o.bedrooms)){showToast('Las habitaciones deben ser un número entero positivo.','error');return}if(isNaN(o.bathrooms)||o.bathrooms<=0){showToast('Los baños deben ser un número positivo.','error');return}const a=/^[^\s@]+@[^\s@]+\.[^\s@]+$|^[0-9\s\-\(\)\+]{7,}$/;if(!a.test(o.contact)){showToast('Formato de contacto inválido. Ingrese un email o un número de teléfono válido (mín. 7 dígitos).','error');return}if(imageUpload.files.length>0&&'false'===imageUrlUnchanged.value){o.image_url='https://picsum.photos/400/300?'+Math.random()}else if(editingDepartmentId&&'true'===imageUrlUnchanged.value){const e=allDepartments.find(e=>e.id===editingDepartmentId);o.image_url=e?e.image_url:null}else{o.image_url=null}await saveDepartment(o)});contactToggleButton.addEventListener('click', () => {contactFormContainer.style.display = contactFormContainer.style.display === 'none' ? 'block' : 'none';});contactForm.addEventListener('submit', async (e) => {e.preventDefault();const inquirerName = document.getElementById('inquirer-name').value.trim();const inquirerEmail = document.getElementById('inquirer-email').value.trim();const inquirerPhone = document.getElementById('inquirer-phone').value.trim();const inquirerMessage = document.getElementById('inquirer-message').value.trim();if (!inquirerName) {showToast('Por favor, ingresa tu nombre.', 'error');return;}const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;if (!inquirerEmail || !emailRegex.test(inquirerEmail)) {showToast('Por favor, ingresa un email válido.', 'error');return;}if (!inquirerMessage) {showToast('El mensaje no puede estar vacío.', 'error');return;}showToast('Consulta enviada con éxito. El publicador se contactará pronto.', 'success');console.log('Consulta enviada:', {departmentId: document.getElementById('department-title').textContent, inquirerName, inquirerEmail, inquirerPhone, inquirerMessage});contactForm.reset();contactFormContainer.style.display = 'none';});
function renderPaginationControls() {
    const totalPages = Math.ceil(totalDepartmentsCount / itemsPerPage);
    paginationControls.innerHTML = '';
    // --- MODIFICACIÓN: Ajustar visualización de paginación para "Mis Publicaciones" ---
    // Si estamos en "Mis Publicaciones", es posible que la paginación no tenga sentido si hay pocos.
    // Para simplificar, la paginación siempre se basará en totalDepartmentsCount (global)
    // Pero si userOnly está activado, la URL de carga ya filtra.
    // Esto crea un pequeño desajuste: los números de página se basan en el total global,
    // pero al hacer clic, solo mostrarán los del usuario para esa página.
    // Una solución real sería: cuando userOnly es true, hacer un fetch extra para el x-total-count de los items del usuario.
    // Por simplicidad, mantendremos el total global para los botones, pero la lista se filtra.
    // Si queremos que los números de página reflejen solo las publicaciones del usuario:
    // necesitamos el conteo real de publicaciones del usuario.
    // Por ahora, solo ocultamos si no hay elementos en la página actual.
    
    if (allDepartments.length === 0 && (currentSearchTerm === '' || (currentUser && currentUser.showMyListings))) {
         paginationControls.style.display = 'none';
         return;
    }

    paginationControls.style.display = 'flex';
    // --- FIN MODIFICACIÓN ---

    const prevButton = document.createElement('button');
    prevButton.textContent = 'Anterior';
    prevButton.classList.add('pagination-button');
    prevButton.disabled = currentPage === 1;
    prevButton.addEventListener('click', () => goToPage(currentPage - 1));
    paginationControls.appendChild(prevButton);
    const maxPageNumbersToShow = 5;let startPage = Math.max(1, currentPage - Math.floor(maxPageNumbersToShow / 2));let endPage = Math.min(totalPages, startPage + maxPageNumbersToShow - 1);if (endPage - startPage + 1 < maxPageNumbersToShow) {startPage = Math.max(1, endPage - maxPageNumbersToShow + 1);}
    for (let i = startPage; i <= endPage; i++) {
        const pageButton = document.createElement('button');
        pageButton.textContent = i;
        pageButton.classList.add('pagination-button');
        if (i === currentPage) {
            pageButton.classList.add('active');
        }
        pageButton.addEventListener('click', () => goToPage(i));
        paginationControls.appendChild(pageButton);
    }
    const nextButton = document.createElement('button');
    nextButton.textContent = 'Siguiente';
    nextButton.classList.add('pagination-button');
    nextButton.disabled = currentPage === totalPages || totalPages === 0;
    nextButton.addEventListener('click', () => goToPage(currentPage + 1));
    paginationControls.appendChild(nextButton);
}
function goToPage(page) {
    // Si el usuario está viendo sus listados, pasar ese estado a loadDepartments
    const userOnly = currentUser && currentUser.showMyListings;
    if (page < 1 || page > Math.ceil(totalDepartmentsCount / itemsPerPage) && !userOnly) { // Ajuste para userOnly
        return;
    }
    currentPage = page;
    loadDepartments(currentPage, userOnly); // Pasar userOnly
}

// --- NUEVAS FUNCIONES Y EVENT LISTENERS PARA PERFIL DE USUARIO ---
function generateUserId() {
    return 'user_' + Math.random().toString(36).substr(2, 9);
}

function saveUserToLocalStorage(user) {
    localStorage.setItem('currentUser', JSON.stringify(user));
    currentUser = user;
    updateUserUI();
}

function loadUserFromLocalStorage() {
    const user = localStorage.getItem('currentUser');
    if (user) {
        currentUser = JSON.parse(user);
    }
    updateUserUI();
}

function updateUserUI() {
    if (currentUser) {
        userActionButton.textContent = `Hola, ${currentUser.name || 'Usuario'} (Mi Perfil)`;
        publishButton.style.display = 'block'; // Mostrar botón de publicar
    } else {
        userActionButton.textContent = 'Iniciar Sesión / Registrarse';
        publishButton.style.display = 'none'; // Ocultar botón de publicar si no hay sesión
    }
    // Si no hay user logueado, asegurarse de que no se estén mostrando sus listados
    if (!currentUser && userActionButton.dataset.view === 'my-listings') {
        userActionButton.dataset.view = 'all'; // Cambiar a vista de todos
        loadDepartments(1, false);
    }
    // Ocultar botones de editar/eliminar de las tarjetas si no es el dueño
    displayDepartments(allDepartments); // Volver a renderizar para aplicar cambios en botones
}

// Event listener para el botón de acción de usuario
userActionButton.addEventListener('click', () => {
    if (currentUser) {
        // Si ya hay un usuario, este botón alterna entre "Todos" y "Mis Publicaciones"
        if (userActionButton.dataset.view === 'all') {
            userActionButton.dataset.view = 'my-listings';
            userActionButton.textContent = `Hola, ${currentUser.name || 'Usuario'} (Todas las Publicaciones)`;
            loadDepartments(1, true); // Cargar solo los listados del usuario
        } else {
            userActionButton.dataset.view = 'all';
            userActionButton.textContent = `Hola, ${currentUser.name || 'Usuario'} (Mis Publicaciones)`;
            loadDepartments(1, false); // Cargar todos los listados
        }
    } else {
        // Si no hay usuario, abrir modal de autenticación
        authTitle.textContent = 'Inicia Sesión o Regístrate';
        authNameGroup.style.display = 'block'; // Mostrar nombre en registro
        authForm.dataset.mode = 'register'; // Por defecto, mostrar registro
        authToggleLink.textContent = '¿Ya tienes una cuenta? Inicia Sesión aquí.';
        openModal(modalAuth);
    }
});

// Lógica de formulario de autenticación
authForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const email = document.getElementById('auth-email').value.trim();
    const name = document.getElementById('auth-name').value.trim();
    const mode = authForm.dataset.mode;

    if (!email) {
        showToast('El email es obligatorio.', 'error');
        return;
    }
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
        showToast('Por favor, ingresa un email válido.', 'error');
        return;
    }

    if (mode === 'register') {
        if (!name) {
            showToast('El nombre es obligatorio para registrarse.', 'error');
            return;
        }
        const newUser = { id: generateUserId(), name: name, email: email, showMyListings: false }; // Añadir showMyListings
        saveUserToLocalStorage(newUser);
        showToast(`Bienvenido, ${name}! Te has registrado exitosamente.`, 'success');
        closeModal(modalAuth);
        loadDepartments(1, false); // Recargar todos los departamentos
    } else { // Login mode
        // En una app real, aquí se verificarían credenciales.
        // Aquí, simplemente "logueamos" con un ID y nombre ficticio basado en el email
        const loggedInUser = { id: 'user_' + email.split('@')[0], name: name || email.split('@')[0], email: email, showMyListings: false };
        saveUserToLocalStorage(loggedInUser);
        showToast(`Bienvenido de nuevo, ${loggedInUser.name}!`, 'success');
        closeModal(modalAuth);
        loadDepartments(1, false); // Recargar todos los departamentos
    }
});

// Alternar entre registro y login
authToggleLink.addEventListener('click', (e) => {
    e.preventDefault();
    if (authForm.dataset.mode === 'register') {
        authForm.dataset.mode = 'login';
        authTitle.textContent = 'Iniciar Sesión';
        authNameGroup.style.display = 'none'; // Ocultar nombre en login
        authToggleLink.textContent = '¿No tienes una cuenta? Regístrate aquí.';
    } else {
        authForm.dataset.mode = 'register';
        authTitle.textContent = 'Registrarse';
        authNameGroup.style.display = 'block'; // Mostrar nombre en registro
        authToggleLink.textContent = '¿Ya tienes una cuenta? Inicia Sesión aquí.';
    }
    authForm.reset(); // Limpiar formulario al cambiar de modo
});

// Función para cerrar sesión
function logout() {
    localStorage.removeItem('currentUser');
    currentUser = null;
    showToast('Sesión cerrada correctamente.', 'info');
    updateUserUI();
    loadDepartments(1, false); // Cargar todos los departamentos
}
// Añadir un listener al body o a un nuevo botón de logout (si lo creas en el HTML)
// Por ahora, el mismo botón de userAction manejará el "Cerrar Sesión" si estás logueado y haciendo click
// o podríamos añadir un botón específico en el modal de perfil si lo expandimos.
// Para esta implementación, el botón de "userActionButton" alternará entre "Mis Publicaciones" y "Todas las publicaciones"
// El "logout" lo podrías añadir en una futura expansión de un modal de "Mi Perfil".
// Por ahora, para probar logout, puedes agregarlo a la consola o a un botón separado.
// Para esta implementación, NO hay botón de logout directo.

document.addEventListener('DOMContentLoaded',() => {
    loadUserFromLocalStorage(); // Cargar el usuario al inicio
    loadDepartments(currentPage); // Cargar la primera página de departamentos
});
// --- FIN NUEVAS FUNCIONES Y EVENT LISTENERS PARA PERFIL DE USUARIO ---